

# This file was *autogenerated* from the file plot_xor_experiment.sage
from sage.all_cmdline import *   # import sage library

_sage_const_11 = Integer(11); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_8 = Integer(8); _sage_const_7 = Integer(7); _sage_const_1p0 = RealNumber('1.0')
import numpy as np
import sage.all
import matplotlib.pyplot as plt


MODELS = ["exhaustive", "sequential", "modulo"]


aes_res = load('aes_xor_experiments_timeout20000.sobj')
AES_ROUND_MAX = _sage_const_11 
ROUND_RANGE = range(_sage_const_1 , AES_ROUND_MAX)


for state_size_ctr in [_sage_const_2 , _sage_const_3 , _sage_const_4 ]:
    fig, axs = plt.subplots(_sage_const_4 , sharex=True, sharey=False)
    fig.suptitle(f"AES (state_size={state_size_ctr})")
    c = _sage_const_0 
    for word_size_ctr in [_sage_const_2 , _sage_const_3 , _sage_const_4 , _sage_const_8 ]:
        axs[c].set_title(f"word_size={word_size_ctr}")
        axs[c].set(xlabel="Rounds", ylabel="Solving time (s)")
        axs[c].grid()
        sym = {"exhaustive": '-', "sequential": '--', "modulo": ':'}
        for tested_model in MODELS:
            # plt.semilogy(ROUND_RANGE, res[tested_model][state_size_ctr][word_size_ctr][:AES_ROUND_MAX-1], label=tested_model)
            axs[c].plot(ROUND_RANGE, aes_res[tested_model][state_size_ctr][word_size_ctr][:AES_ROUND_MAX - _sage_const_1 ],
                        sym[tested_model],
                     label=tested_model)
        c += _sage_const_1 
        fig.legend(MODELS, loc='lower right')
    fig.tight_layout(pad=_sage_const_1 )
    fig.savefig(f'aes_{state_size_ctr}x{state_size_ctr}.pdf')
plt.tight_layout()
plt.show()


midori_res = load('midori64_xor_experiments_timeout10000.sobj')
MIDORI_MAX_ROUND = _sage_const_7 
ROUND_RANGE = range(_sage_const_1 , MIDORI_MAX_ROUND)

for tested_model in MODELS:
    plt.semilogy(ROUND_RANGE, midori_res[tested_model][:MIDORI_MAX_ROUND - _sage_const_1 ], label=tested_model)

plt.legend(loc="lower right")
plt.ylabel("Solving time (s)")
plt.xlabel("Rounds")
plt.xticks(np.arange(min(ROUND_RANGE), max(ROUND_RANGE) + _sage_const_1 , _sage_const_1p0 ))
plt.title("Midori64 xor experiment")
plt.grid()
plt.savefig('midori64.pdf')
plt.show()


